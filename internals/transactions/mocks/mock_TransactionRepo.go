// Code generated by MockGen. DO NOT EDIT.
// Source: internals/transactions/repo/TransactionRepo.go
//
// Generated by this command:
//
//	mockgen -source=internals/transactions/repo/TransactionRepo.go -destination internals/transactions/mocks/mock_TransactionRepo.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Sampriti-Mitra/transactions/internals/transactions/models"
	gomock "go.uber.org/mock/gomock"
)

// MockITransactionRepo is a mock of ITransactionRepo interface.
type MockITransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepoMockRecorder
}

// MockITransactionRepoMockRecorder is the mock recorder for MockITransactionRepo.
type MockITransactionRepoMockRecorder struct {
	mock *MockITransactionRepo
}

// NewMockITransactionRepo creates a new mock instance.
func NewMockITransactionRepo(ctrl *gomock.Controller) *MockITransactionRepo {
	mock := &MockITransactionRepo{ctrl: ctrl}
	mock.recorder = &MockITransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionRepo) EXPECT() *MockITransactionRepoMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockITransactionRepo) CreateAccount(account *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockITransactionRepoMockRecorder) CreateAccount(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockITransactionRepo)(nil).CreateAccount), account)
}

// CreateTransaction mocks base method.
func (m *MockITransactionRepo) CreateTransaction(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockITransactionRepoMockRecorder) CreateTransaction(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockITransactionRepo)(nil).CreateTransaction), transaction)
}

// CreateTransactionWithUpdatedBalance mocks base method.
func (m *MockITransactionRepo) CreateTransactionWithUpdatedBalance(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionWithUpdatedBalance", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransactionWithUpdatedBalance indicates an expected call of CreateTransactionWithUpdatedBalance.
func (mr *MockITransactionRepoMockRecorder) CreateTransactionWithUpdatedBalance(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionWithUpdatedBalance", reflect.TypeOf((*MockITransactionRepo)(nil).CreateTransactionWithUpdatedBalance), transaction)
}

// FetchAccount mocks base method.
func (m *MockITransactionRepo) FetchAccount(accountId int64) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccount", accountId)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAccount indicates an expected call of FetchAccount.
func (mr *MockITransactionRepoMockRecorder) FetchAccount(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccount", reflect.TypeOf((*MockITransactionRepo)(nil).FetchAccount), accountId)
}
