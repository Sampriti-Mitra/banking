package controllers

import (
	"errors"
	"strconv"

	"github.com/Sampriti-Mitra/transactions/internals/transactions/models"
	"github.com/Sampriti-Mitra/transactions/internals/transactions/services"
	"github.com/gin-gonic/gin"

	_ "github.com/Sampriti-Mitra/transactions/docs" // docs is generated by Swag CLI, you have to import it.
)

type TransactionController struct {
	ts services.ITransactionService
}

func NewTransactionController(ts services.ITransactionService) *TransactionController {
	return &TransactionController{ts: ts}
}

// CreateAccount godoc
//
//	@Summary		create an account
//	@Description	create an account
//	@Tags			accounts
//	@Param			request	body	models.Account true "Account Create"
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	models.Account
//	@Failure		400	{object}	utils.ErrorMsg
//	@Failure		500	{object}	utils.ErrorMsg
//	@Router			/accounts/ [post]
func (tc *TransactionController) CreateAccount(ctx *gin.Context) {

	var acc models.Account
	err := ctx.BindJSON(&acc)
	if err != nil {
		ctx.JSON(400, err)

		return
	}

	resp, custErr := tc.ts.CreateAccount(&acc)
	if custErr != nil {
		ctx.JSON(custErr.StatusCode, custErr.ErrMsg)

		return
	}

	ctx.JSON(201, resp)
}

// GetAccount godoc
//
//	@Summary		Get an account
//	@Description	get string by ID
//	@Tags			accounts
//	@Accept			json
//	@Produce		json
//	@Param			id	path		int	true	"Account ID"
//	@Success		200	{object}	models.Account
//	@Failure		400	{object}	utils.ErrorMsg
//	@Failure		500	{object}	utils.ErrorMsg
//	@Router			/accounts/{id} [get]
func (tc *TransactionController) GetAccount(ctx *gin.Context) {

	params := ctx.Params
	accountIdStr, ok := params.Get("id")
	if !ok {
		ctx.JSON(400, errors.New("account missing"))

		return
	}

	accountId, _ := strconv.ParseInt(accountIdStr, 10, 64)

	resp, custErr := tc.ts.FetchAccount(accountId)
	if custErr != nil {
		ctx.JSON(custErr.StatusCode, custErr.ErrMsg)

		return
	}
	ctx.JSON(201, resp)

}

// CreateTransaction godoc
//
//	@Summary		create transaction
//	@Description	create a transaction
//	@Tags			transaction
//	@Accept			json
//	@Produce		json
//	@Param			request	body	models.Transaction true "Account Create"
//	@Success		200	{object}	models.Transaction
//	@Failure		400	{object}	utils.ErrorMsg
//	@Failure		500	{object}	utils.ErrorMsg
//	@Router			/transactions/ [post]
func (tc *TransactionController) CreateTransaction(ctx *gin.Context) {

	var transaction models.Transaction
	err := ctx.BindJSON(&transaction)
	if err != nil {
		ctx.JSON(400, err)
		return
	}

	resp, custErr := tc.ts.CreateTransaction(&transaction)
	if custErr != nil {
		ctx.JSON(custErr.StatusCode, custErr.ErrMsg)
		return
	}
	ctx.JSON(200, resp)
}
